// Generated by CoffeeScript 1.4.0

/* ============================================================
# bootstrap-tour.js v0.1
# http://pushly.github.com/bootstrap-tour/
# ==============================================================
# Copyright 2012 Push.ly
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
*/


(function() {

  (function($, window) {
    var Tour, document;
    document = window.document;
    Tour = (function() {

      function Tour(options, callback) {
        var _this = this;
        this._options = $.extend({
          name: 'tour',
          labels: {
            end: 'End tour',
            next: 'Next &raquo;',
            prev: '&laquo; Prev'
          },
          keyboard: true,
          storageType: "cookie",
          sourceController: "",
          sourceAction: "",
          afterSetState: function(key, value) {},
          afterGetState: function(key, value) {},
          onStart: function(tour) {},
          onEnd: function(tour) {},
          onShow: function(tour) {},
          onHide: function(tour) {},
          onShown: function(tour) {}
        }, options);
        this._steps = [];
        this.setCurrentStep(callback);
        this._onresize(function() {
          _this.ended(function(result, oldThis){
            if(!result){
              callback(oldThis.showStep(oldThis._current), oldThis)
            }
          });

        });
      }

      Tour.prototype.getState = function(key, callback) {
        oldThis = this;
        switch(this._options.storageType){
          case "cookie":
            var full_key = "" + this._options.name + "_" + key;
            console.log("cookie, getState, key -> " + full_key);
            setTimeout(function(){
            // debugger; 
                        value = $.cookie(full_key);
                        oldThis._options.afterGetState(key, value);
                        callback(value, oldThis); 
                      },
                  0);
            break;

          case "localStorage":
            var full_key = "" + this._options.name + "_" + key;
            console.log("localStorage, getState, key -> " + full_key);
            setTimeout(function(){
                        value = window.localStorage.getItem(full_key);
                        oldThis._options.afterGetState(key, value);
                        callback(value, oldThis);
                  },
              0);
            break;
          
          case "database":
            $.ajax({
                type: "GET",
                url: "/citizens/get_bootstrap_tour",
                data: {
                        source_controller: this._options.sourceController, 
                        source_action: this._options.sourceAction,
                        key: key
                      },
                success: function(data){
                  value = data;
                  oldThis._options.afterGetState(key, value);
                  callback(value, oldThis);
                },
                error: function() {
                  alert('Error occured');
                }
            });
            break;
        }
      };

      Tour.prototype.setState = function(key, value, callback) {
        oldThis = this;
        if (!callback){
          callback = function(){ };
        }
        switch(this._options.storageType){
          case "cookie":
                var full_key = "" + this._options.name + "_" + key;
                console.log("cookie, setState, key -> " + full_key);
                setTimeout(function(){
                        value = $.cookie(full_key, value, {expires: 36500, path: '/'});
                        // return 
                        oldThis._options.afterSetState(key, value);
                        //debugger;
                        callback(value, oldThis);
                   },0);
                break;

          case "localStorage":
                var full_key = "" + this._options.name + "_" + key;
                console.log("localStorage, setState, key -> " + full_key);
                setTimeout(function(){
                      // return 
                      oldThis._options.afterSetState(key, value);
                      callback(window.localStorage.setItem(full_key, value));
                  },0);
                break;

          case "database":
                console.log("db, setState, key -> " + full_key);
                $.ajax({
                    type: "POST",
                    url: "/citizens/update_bootstrap_tour",
                    data: {
                            source_controller: this._options.sourceController, 
                            source_action: this._options.sourceAction,
                            key: key,
                            value: value
                          },
                    success: function(data){
                      // return 
                      oldThis._options.afterSetState(key, value);
                      callback(data);
                    },
                    error: function() {
                        alert('Error occured');
                    }
                });
            break;
        }
      };

      Tour.prototype.addStep = function(step) {
        return this._steps.push(step);
      };

      Tour.prototype.getStep = function(i) {
        if (this._steps[i] != null) {
          return $.extend({
            path: "",
            placement: "right",
            title: "",
            content: "",
            next: i === this._steps.length - 1 ? -1 : i + 1,
            prev: i - 1,
            animation: true,
            onShow: this._options.onShow,
            onHide: this._options.onHide,
            onShown: this._options.onShown
          }, this._steps[i]);
        }
      };

      Tour.prototype.start = function(force, callback) {
        debugger;
        var _this = this;
        if (force == null) {
          force = false;
        }

        this.ended(function(result, oldThis){
          if(result && !force){
            callback(result, oldThis);
          }
        }); 

        $(document).off("click.bootstrap-tour", ".popover .next").on("click.bootstrap-tour", ".popover .next", function(e) {
          e.preventDefault();
          return _this.next();
        });
        $(document).off("click.bootstrap-tour", ".popover .prev").on("click.bootstrap-tour", ".popover .prev", function(e) {
          e.preventDefault();
          return _this.prev();
        });
        $(document).off("click.bootstrap-tour", ".popover .end").on("click.bootstrap-tour", ".popover .end", function(e) {
          e.preventDefault();
          _this.end(callback);
        });

        this._setupKeyboardNavigation();
        if (this._options.onStart != null) {
          this._options.onStart(this);
        }
        
        this.showStep(this._current, callback);
      };

      Tour.prototype.next = function(callback) {
        this.hideStep(this._current);
        this.showNextStep(callback);
      };

      Tour.prototype.prev = function(callback) {
        this.hideStep(this._current);
        this.showPrevStep(callback);
      };

      Tour.prototype.end = function(callback) {
        this.hideStep(this._current);
        $(document).off(".bootstrap-tour");
        this.setState("end", "yes", function(result, oldThis){
          if(oldThis._options.onEnd != null) {
            callback(oldThis._options.onEnd(oldThis), oldThis);
          } else {
            callback(result, oldThis);
          }
        });
      };

      Tour.prototype.ended = function(callback) {
        this.getState("end", function(result, oldThis){
          callback(!!result, oldThis);
        });
      };

      Tour.prototype.restart = function(callback) {
        this.setState("current_step", null, function(result, oldThis){
          callback(result, oldThis);
          oldThis.setState("end", null, function(result, oldThis){
            callback(result, oldThis);
            this.setCurrentStep(0, function(result, oldThis){
              callback(result, oldThis);
              oldThis.start(false, callback);
            });
          });
        });
      };

      Tour.prototype.hideStep = function(i) {
        var step;
        step = this.getStep(i);
        if (step.onHide != null) {
          step.onHide(this);
        }
        return $(step.element).popover("hide");
      };

      Tour.prototype.showStep = function(i, callback) {
        var step = this.getStep(i);
        if (!step) {
          return;
        }
        
        this.setCurrentStep(i, function(result, oldThis){
          if (step.path !== "" && document.location.pathname !== step.path && document.location.pathname.replace(/^.*[\\\/]/, '') !== step.path) {
            document.location.href = step.path;
            callback(result, oldThis);
          }
        });
        
        if (step.onShow != null) {
          step.onShow(this);
        }
        if (!((step.element != null) && $(step.element).length !== 0 && $(step.element).is(":visible"))) {
          this.showNextStep(callback);
          return;
        }
        this._showPopover(step, i);
        if (step.onShown != null) {
          return step.onShown(this);
        }
      };

      Tour.prototype.setCurrentStep = function(value, callback) {
        if (value != null) {
          this._current = value;
          this.setState("current_step", value, callback);
        } else {
          this.getState("current_step", function(result, oldThis){
            oldThis._current = result;
            if (oldThis._current === null || oldThis._current === "null") {
              callback(oldThis._current = 0, oldThis);
            } else {
              callback(oldThis._current = parseInt(oldThis._current), oldThis);
            }
          });
        }
      };

      Tour.prototype.showNextStep = function(callback) {
        var step = this.getStep(this._current);
        this.showStep(step.next, callback);
      };

      Tour.prototype.showPrevStep = function(callback) {
        var step = this.getStep(this._current);
        this.showStep(step.prev, callback);
      };

      Tour.prototype._showPopover = function(step, i) {
        var content, nav, options, tip,
          _this = this;
        content = "" + step.content + "<br /><p>";
        options = $.extend({}, this._options);
        if (step.options) {
          $.extend(options, step.options);
        }
        if (step.reflex) {
          $(step.element).css("cursor", "pointer");
          $(step.element).on("click", function(e) {
            $(step.element).css("cursor", "auto");
            return _this.next();
          });
        }
        nav = [];
        if (step.prev >= 0) {
          nav.push("<a href='#" + step.prev + "' class='prev'>" + options.labels.prev + "</a>");
        }
        if (step.next >= 0) {
          nav.push("<a href='#" + step.next + "' class='next'>" + options.labels.next + "</a>");
        }
        content += nav.join(" | ");
        content += "<a href='#' class='pull-right end'>" + options.labels.end + "</a>";
        $(step.element).popover('destroy').popover({
          placement: step.placement,
          trigger: "manual",
          title: step.title,
          content: content,
          html: true,
          animation: step.animation
        }).popover("show");
        tip = $(step.element).data("popover").tip();
        this._reposition(tip);
        return this._scrollIntoView(tip);
      };

      Tour.prototype._reposition = function(tip) {
        var offsetBottom, offsetRight, tipOffset;
        tipOffset = tip.offset();
        offsetBottom = $(document).outerHeight() - tipOffset.top - $(tip).outerHeight();
        if (offsetBottom < 0) {
          tipOffset.top = tipOffset.top + offsetBottom;
        }
        offsetRight = $(document).outerWidth() - tipOffset.left - $(tip).outerWidth();
        if (offsetRight < 0) {
          tipOffset.left = tipOffset.left + offsetRight;
        }
        if (tipOffset.top < 0) {
          tipOffset.top = 0;
        }
        if (tipOffset.left < 0) {
          tipOffset.left = 0;
        }
        return tip.offset(tipOffset);
      };

      Tour.prototype._scrollIntoView = function(tip) {
        var tipRect;
        tipRect = tip.get(0).getBoundingClientRect();
        if (!(tipRect.top > 0 && tipRect.bottom < $(window).height() && tipRect.left > 0 && tipRect.right < $(window).width())) {
          return tip.get(0).scrollIntoView(true);
        }
      };

      Tour.prototype._onresize = function(cb, timeout) {
        return $(window).resize(function() {
          clearTimeout(timeout);
          return timeout = setTimeout(cb, 100);
        });
      };

      Tour.prototype._setupKeyboardNavigation = function() {
        var _this = this;
        if (this._options.keyboard) {
          return $(document).on("keyup.bootstrap-tour", function(e) {
            if (!e.which) {
              return;
            }
            switch (e.which) {
              case 39:
                e.preventDefault();
                if (_this._current < _this._steps.length - 1) {
                  return _this.next();
                }
                break;
              case 37:
                e.preventDefault();
                if (_this._current > 0) {
                  return _this.prev();
                }
            }
          });
        }
      };

      return Tour;

    })();
    return window.Tour = Tour;
  })(jQuery, window);

}).call(this);
